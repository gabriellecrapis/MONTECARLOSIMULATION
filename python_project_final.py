# -*- coding: utf-8 -*-
"""python-project-final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/gabriellecrapis/a63c627d01c12c94b7949313ce263bdf/python-project-final.ipynb

# MONTECARLO SIMULATION
"""

#Download the software
!pip install yfinance
!pip install numpy
!pip install pandas
!pip install matplotlib
!pip install datetime
!pip install wikipedia
!pip install python.docx

# import the software
import yfinance as yf # For downloading stock data
import numpy as np # For mathematical calculations
import pandas as pd # For handling dates
import matplotlib.pyplot as plt # For plotting graphs
from datetime import date # For getting today's date
import wikipedia  # Import the Wikipedia library

# Define function for Monte Carlo simulation
def monte_carlo_simulation(stock_symbol, start_date, end_date, num_simulations, num_days):
    # Download historical stock data from Yahoo Finance
    stock_data = yf.download(stock_symbol, start=start_date, end=end_date)['Adj Close']

    # Calculate daily returns from the historical stock data
    daily_returns = stock_data.pct_change()

    # Calculate mean and standard deviation of daily returns
    mean_daily_return = daily_returns.mean()
    std_daily_return = daily_returns.std()

    # Create an array to store simulated prices for each simulation
    simulated_prices = np.zeros((num_simulations, num_days))

    # Generate simulations for future stock prices
    for i in range(num_simulations):
        # Initialize price at the last known price
        simulated_price = stock_data.iloc[-1]

        for day in range(num_days):
            # Calculate daily price change using random normal distribution
            daily_price_change = np.random.normal(mean_daily_return, std_daily_return)

            # Update simulated price for the next day
            simulated_price *= 1 + daily_price_change
            simulated_prices[i, day] = simulated_price

    return simulated_prices

# Example usage of the Monte Carlo simulation function

stock_symbol = 'AAPL' # Symbol for Apple stock, enter any other stock to have another report
start_date = '2015-01-01' # Start date of the analysis period, 10 years period for reliable result
end_date = str(date.today())  # End date of the analysis period, today
num_simulations = 10000  # Number of times the simulation will be run
num_days = 30 # Number of days to simulate into the future

# Running the simulation and retrieving simulated prices
simulated_prices = monte_carlo_simulation(stock_symbol, start_date, end_date, num_simulations, num_days)

# Fetch 10 years of historical data
historical_start_date = (pd.to_datetime(end_date) - pd.DateOffset(years=10)).strftime('%Y-%m-%d')
historical_data = yf.download(stock_symbol, start=historical_start_date, end=end_date)['Adj Close']

# Calculate mean prices from the simulated prices for plotting
mean_prices = np.mean(simulated_prices, axis=0)

# Import software for the docx
from docx import Document  # For creating DOCX documents
from docx.shared import Inches # For specifying image sizes in the DOCX document
from docx.shared import Pt # For specifying font size
from docx.enum.text import WD_ALIGN_PARAGRAPH  # For paragraph alignment options

# Initialize DOCX document
doc = Document()

# Add a title and center it
title = doc.add_heading(level=0)  # 'level=0' for the title of the document
run = title.add_run('Monte Carlo Simulation Report')
run.bold = True
run.font.size = Pt(24)  # Set the font size if desired
paragraph_format = title.paragraph_format
paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER

# Introduction from wikipedia
doc.add_heading('Introduction to the concept of Monte Carlo simulation')
doc.add_paragraph(wikipedia.summary('Monte Carlo model', sentences =5))

# Graph 1: Plotting all the simulated paths
plt.figure(figsize=(10,6))
for i in range(simulated_prices.shape[0]):
    plt.plot(simulated_prices[i, :], linewidth=1)
plt.title(f"Monte Carlo Simulation of {stock_symbol} Stock Price Over {num_days} Days")
plt.xlabel("Days into the future")
plt.ylabel("Price (USD)")
plt.grid(True)
graph1_path = 'monte_carlo_simulation.png'
plt.savefig(graph1_path)
plt.close()
percentage_change = ((mean_prices[-1] - mean_prices[0]) / mean_prices[0]) * 100

doc.add_heading('Monte Carlo Simulation of Stock Price', level=1)
doc.add_picture(graph1_path, width=Inches(6))

# Graph 2: Plotting the mean of the simulated paths
plt.figure(figsize=(10, 6))
plt.plot(range(num_days), mean_prices, color='red', linewidth=2)
plt.title(f'Mean of Simulated Paths of {stock_symbol}')
plt.xlabel('Days into the Future')
plt.ylabel('Price (USD)')
plt.grid(True)
change_direction = "has increased" if percentage_change >= 0 else "has decreased"
plt.text(x=num_days * 0.5, y=min(mean_prices), s=f"Over 30 days, the stock price {change_direction} of {abs(percentage_change):.2f}%",
         fontsize=12, bbox=dict(facecolor='white', alpha=1))
graph2_path = 'mean_simulated_paths.png'
plt.savefig(graph2_path)
plt.close()

doc.add_heading('Mean of Simulated Paths', level=1)
doc.add_picture(graph2_path, width=Inches(6))

# Graph 3: Plotting the 10-Year Historical Stock Price Trend
plt.figure(figsize=(10, 6))
plt.plot(historical_data.index, historical_data, color='blue', linewidth=2)
plt.title(f'10-Year Historical Stock Price Trend for {stock_symbol}')
plt.xlabel('Date')
plt.ylabel('Historical Price (USD)')
graph3_path = 'historical_stock_price.png'
plt.savefig(graph3_path)
plt.close()

doc.add_heading('10-Year Historical Stock Price Trend', level=1)
doc.add_picture(graph3_path, width=Inches(6))

#Conclusion
if mean_prices[-1] > mean_prices[0]:
    recommendation = f"Based on the Monte Carlo simulation results, the mean price of the stock {stock_symbol} has increased over the period. It is recommended to invest in this stock, you will maybe obtain a return of {abs(percentage_change):.2f}%."
else:
    recommendation = f"Based on the Monte Carlo simulation results, the mean price of the stock {stock_symbol} has decreased over the period. It is recommended not to invest in this stock, you will maybe loose {abs(percentage_change):.2f}% of your initial investment"
doc.add_heading(f'Should you invest in {stock_symbol} ?', level=1)
doc.add_paragraph(recommendation)

# Save the DOCX report
docx_file_path = 'Monte_Carlo_Simulation_Report.docx'
doc.save(docx_file_path)
print(f"Document saved as '{docx_file_path}'.")